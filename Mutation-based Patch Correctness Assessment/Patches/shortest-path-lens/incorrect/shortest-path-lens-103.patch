--- /src/main/java/org/quixbugs/SHORTEST_PATH_LENGTHS.java	2022-09-21 16:46:13.692065972 -0500
+++ /src/main/java/org/quixbugs/SHORTEST_PATH_LENGTHS.java	2022-09-21 16:47:19.612716435 -0500
@@ -26,19 +26,22 @@
                 else if (length_by_edge.containsKey(edge) ) {
                     length_by_path.put(edge, length_by_edge.get(edge));
                 } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
-        }
-        for (int k = 0; k < numNodes; k++) {
-            for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
+		    return length_by_path;
                 }
             }
         }
+	for (int i = 0; i < numNodes; i++) {                                                                                                                                                              
+	    for (int j = 0; j < numNodes; j++) {                                                                                                                                               
+		List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));                                                                                                                 
+		if (i == j) {                                                                                                                                                              
+		    length_by_path.put(edge, 0);                                                                                                                                       
+		} else if (length_by_edge.containsKey(edge)) {                                                                                                                             
+		    length_by_path.put(edge, length_by_edge.get(edge));                                                                                                                
+		} else {                                                                                                                                                                   
+		    length_by_path.put(edge, INF);                                                                                                                                     
+		}                                                                                                                                                                          
+	    }                                                                                                                                                                                  
+	}
         return length_by_path;
     }
 }

